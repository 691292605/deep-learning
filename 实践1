import numpy as np


class BP:
    def __init__(self, input_size, hidden_size, output_size, lr, batch_size):
        self.W1 = np.random.randn(input_size, hidden_size)
        self.W2 = np.random.randn(hidden_size, output_size)
        self.b1 = np.zeros((hidden_size,))
        self.b2 = np.zeros((output_size,))
        self.lr = lr
        self.batch_size = batch_size

    def forward(self, x):
        x = x.reshape(self.batch_size, -1)
        z1 = x.dot(self.W1) + self.b1
        a1 = np.tanh(z1)
        z2 = a1.dot(self.W2) + self.b2
        exp_scores = np.exp(z2)
        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)
        return probs, a1

    def backwards(self, x, y):
        x = x.reshape(self.batch_size, -1)
        prob, a1 = self.forward(x)
        delta3 = prob - y
        dW2 = a1.T.dot(delta3)
        db2 = np.sum(delta3, axis=0)
        delta2 = delta3.dot(self.W2.T) * (1 - np.power(a1, 2))
        dW1 = np.dot(x.T, delta2)
        db1 = np.sum(delta2, axis=0)
        self.W1 += -self.lr * dW1
        self.W2 += -self.lr * dW2
        self.b1 += -self.lr * db1
        self.b2 += -self.lr * db2
