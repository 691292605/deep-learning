import numpy as np
import keras


(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

y_train = keras.utils.to_categorical(y_train, num_classes=10)
y_test = keras.utils.to_categorical(y_test, num_classes=10)


num_batches = x_train.shape[0] // 64
num_batch = x_test.shape[0] // 64


class BP:
    def __init__(self, input_size, hidden_size, output_size, lr, batch_size):
        self.W1 = np.random.randn(input_size, hidden_size)
        self.W2 = np.random.randn(hidden_size, output_size)
        self.b1 = np.zeros((hidden_size,))
        self.b2 = np.zeros((output_size,))
        self.lr = lr
        self.batch_size = batch_size

    def forward(self, x):
        x = x.reshape(self.batch_size, -1)
        z1 = x.dot(self.W1) + self.b1
        a1 = np.tanh(z1)
        z2 = a1.dot(self.W2) + self.b2
        exp_scores = np.exp(z2)
        probs = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)
        return probs, a1

    def backwards(self, x, y):
        x = x.reshape(self.batch_size, -1)
        prob, a1 = self.forward(x)
        delta3 = prob - y
        dW2 = a1.T.dot(delta3)
        db2 = np.sum(delta3, axis=0)
        delta2 = delta3.dot(self.W2.T) * (1 - np.power(a1, 2))
        dW1 = np.dot(x.T, delta2)
        db1 = np.sum(delta2, axis=0)
        self.W1 += -self.lr * dW1
        self.W2 += -self.lr * dW2
        self.b1 += -self.lr * db1
        self.b2 += -self.lr * db2

    def train(self, x_train, y_train, x_test, y_test, epochs):
        for i in range(epochs):
            permutation = np.random.permutation(x_train.shape[0])
            x_train_shuffled = x_train[permutation]
            y_train_shuffled = y_train[permutation]
            for j in range(num_batches):
                begin = j * self.batch_size
                end = min(begin + self.batch_size, x_train.shape[0] - 1)
                x = x_train_shuffled[begin:end]
                y = y_train_shuffled[begin:end]
                output, _ = self.forward(x)
                self.backwards(x, y)
        permutation = np.random.permutation(x_test.shape[0])
        x_test_shuffled = x_test[permutation]
        y_test_shuffled = y_test[permutation]
        total_correct = 0
        for k in range(num_batch):
            begin = k * self.batch_size
            end = min(begin + self.batch_size, x_test.shape[0] - 1)
            x = x_test_shuffled[begin:end]
            y = y_test_shuffled[begin:end]
            output, _ = self.forward(x)
            total_correct += np.sum(np.argmax(y, axis=-1) == np.argmax(output, axis=-1))
        print(total_correct / x_test.shape[0])


model = BP(28*28, 64, 10, 1e-3, 64)
model.train(x_train, y_train, x_test, y_test, 20)

