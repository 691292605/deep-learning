import torch
from torch import optim
import torchvision.transforms as transforms
from torch.nn import CrossEntropyLoss
from torchvision.datasets import MNIST
from torch.utils.data import DataLoader
import torch.nn as nn


tensor_tool = transforms.ToTensor()
transform = (transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,)),
]))
train_dataset = MNIST(root = './data', train = True, transform = transform, download = True)
test_dataset = MNIST(root = './data', train = False, transform = transform, download = True)
train_loader = DataLoader(dataset = train_dataset, batch_size = 64, shuffle = True)
test_loader = DataLoader(dataset = test_dataset, batch_size = 1000, shuffle = False)


class vgg(nn.Module):
    def __init__(self, num_classes=10):
        super(vgg, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(1, 32, kernel_size=3, padding=1),
            nn.BatchNorm2d(32),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=2, stride=2),
        )
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(7 * 7 * 64, 128),
            nn.ReLU(inplace=True),
            nn.Dropout(0.5),
            nn.Linear(128, num_classes),
        )

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)
        return x


mymodel = vgg(10)


Loss_func = CrossEntropyLoss()
optimizer = optim.Adam(mymodel.parameters(), lr=0.001)
total_train_step = 0
total_test_step = 0
train_size = len(train_dataset)
test_size = len(test_dataset)
print("训练集的长度为:{}".format(train_size))
print("测试集的长度为:{}".format(test_size))


epochs = 5
for epoch in range(epochs):
    print("------------第{}轮训练开始---------------".format(epoch + 1))
    running_loss = 0.0
    for images, targets in train_loader:
        images = images.reshape(-1, 1, 28, 28)
        outputs = mymodel(images)
        loss = Loss_func(outputs, targets)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        running_loss = running_loss + loss.item()
        total_train_step = total_train_step + 1
        if total_train_step % 500 == 0:
            print("训练总次数:{}，本次训练中的损失={}".format(total_train_step, loss.item()))
    print("本轮训练的总损失={}".format(running_loss))
    total_test_loss = 0.0
    total_accuracy = 0
    with torch.no_grad():
        for Data in test_loader:
            imgs, targets = Data
            imgs = imgs.view(imgs.size(0), 1, 28, 28)
            outputs = mymodel(imgs)
            result_loss = Loss_func(outputs, targets)
            total_test_loss = total_test_loss + result_loss.item()
            accuracy = (outputs.argmax(1) == targets).sum()
            total_accuracy = total_accuracy + accuracy
    print("整个测试集上的损失={}".format(total_test_loss))
    print("整体测试集的正确率={}".format(total_accuracy / test_size))
